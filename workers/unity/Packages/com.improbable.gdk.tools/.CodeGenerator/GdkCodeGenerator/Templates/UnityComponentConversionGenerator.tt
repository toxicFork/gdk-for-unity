<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var fieldDetailsList = GetFieldDetailsList();
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var commandDetailsList = GetCommandDetailsList();
    var eventDetailsList = GetEventDetailsList();
    var componentNamespace = qualifiedNamespace + "." + componentDetails.ComponentName;
    var profilingStart = $"Profiler.BeginSample(\"{componentDetails.ComponentName}\");";
    var profilingEnd = "Profiler.EndSample();";
#>
<#= generatedHeader #>

using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Profiling;
using Unity.Mathematics;
using Unity.Entities;
using Unity.Collections;
using Improbable.Worker.CInterop;
using Improbable.Gdk.Core;
using Improbable.Gdk.ReactiveComponents;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        internal class DispatcherHandler : ComponentDispatcherHandler
        {
            public override uint ComponentId => <#= componentDetails.ComponentId #>;

            private readonly EntityManager entityManager;

            private const string LoggerName = "<#= componentDetails.ComponentName #>.DispatcherHandler";

            public DispatcherHandler(WorkerSystem worker, World world) : base(worker, world)
            {
                entityManager = world.GetOrCreateManager<EntityManager>();
            }

            public override void Dispose()
            {
            }

            public override void OnAddComponent(AddComponentOp op)
            {
                var entity = TryGetEntityFromEntityId(new EntityId(op.EntityId));

                <#= profilingStart #>
                <#= profilingEnd #>
            }

            public override void OnRemoveComponent(RemoveComponentOp op)
            {
                var entity = TryGetEntityFromEntityId(new EntityId(op.EntityId));

                <#= profilingStart #>
                <#= profilingEnd #>
            }

            public override void OnComponentUpdate(ComponentUpdateOp op)
            {
                var entity = TryGetEntityFromEntityId(new EntityId(op.EntityId));

                <#= profilingStart #>
                <#= profilingEnd #>
            }

            public override void OnAuthorityChange(AuthorityChangeOp op)
            {
                var entityId = new EntityId(op.EntityId);
                var entity = TryGetEntityFromEntityId(entityId);

                <#= profilingStart #>
                <#= profilingEnd #>
            }

            // todo can move this into the reactive component manager
            public override void AddCommandComponents(Unity.Entities.Entity entity)
            {
            }
        }

        internal class ReactiveComponentReplicator : IReactiveComponentReplicationHandler
        {
            public uint ComponentId => <#= componentDetails.ComponentId #>;

            public EntityArchetypeQuery EventQuery => new EntityArchetypeQuery
            {
                All = new[]
                {
<# foreach (var eventDetail in eventDetailsList) { #>
                    ComponentType.Create<EventSender.<#= eventDetail.EventName #>>(),
<# } #>
                    ComponentType.ReadOnly<SpatialEntityId>()
                },
                Any = Array.Empty<ComponentType>(),
                None = Array.Empty<ComponentType>(),
            };

            public EntityArchetypeQuery[] CommandQueries => new EntityArchetypeQuery[]
            {
<# foreach (var commandDetails in commandDetailsList) { #>
                new EntityArchetypeQuery()
                {
                    All = new[]
                    {
                        ComponentType.Create<<#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.CommandSenders.<#= commandDetails.CommandName #>>(),
                        ComponentType.Create<<#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.CommandResponders.<#= commandDetails.CommandName #>>(),
                    },
                    Any = Array.Empty<ComponentType>(),
                    None = Array.Empty<ComponentType>(),
                },
<# } #>
            };

            public void SendEvents(ComponentGroup replicationGroup, ComponentSystemBase system, ComponentUpdateSystem componentUpdateSystem)
            {
<# if (eventDetailsList.Count > 0) { #>
                <#= profilingStart #>

                var chunkArray = replicationGroup.CreateArchetypeChunkArray(Allocator.TempJob);
                var spatialOSEntityType = system.GetArchetypeChunkComponentType<SpatialEntityId>(true);
<# foreach (var eventDetail in eventDetailsList) { #>
                var event<#= eventDetail.EventName #>Type = system.GetArchetypeChunkComponentType<EventSender.<#= eventDetail.EventName #>>(true);
<# } #>
                foreach (var chunk in chunkArray)
                {
                    var entityIdArray = chunk.GetNativeArray(spatialOSEntityType);
<# foreach (var eventDetail in eventDetailsList) { #>
                    var event<#= eventDetail.EventName #>Array = chunk.GetNativeArray(event<#= eventDetail.EventName #>Type);
<# } #>
                    for (var i = 0; i < entityIdArray.Length; i++)
                    {
<# foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";
#>
                        foreach (var e in event<#= ev.EventName #>Array[i].Events)
                        {
                            componentUpdateSystem.SendEvent(new <#= eventType #>(e), entityIdArray[i].EntityId);
                        }

                        event<#= ev.EventName #>Array[i].Events.Clear();
<# } #>
                    }
                }

                chunkArray.Dispose();
                <#= profilingEnd #>
<# } #>
            }

            public void SendCommands(ComponentGroup commandGroup, ComponentSystemBase system, CommandSystem commandSystem)
            {
<# if (commandDetailsList.Count > 0) { #>
                <#= profilingStart #>
                var entityType = system.GetArchetypeChunkEntityType();
<#
for (var i = 0; i < commandDetailsList.Count; i++) {
    var commandDetails = commandDetailsList[i];
    var commandSenderType = $"{qualifiedNamespace}.{componentDetails.ComponentName}.CommandSenders.{commandDetails.CommandName}";
    var commandResponderType = $"{qualifiedNamespace}.{componentDetails.ComponentName}.CommandResponders.{commandDetails.CommandName}";
#>
                {
                    var senderType = system.GetArchetypeChunkComponentType<<#= commandSenderType #>>(true);
                    var responderType = system.GetArchetypeChunkComponentType<<#= commandResponderType #>>(true);

                    var chunks = commandGroup.CreateArchetypeChunkArray(Allocator.TempJob);
                    foreach (var chunk in chunks)
                    {
                        var entities = chunk.GetNativeArray(entityType);
                        var senders = chunk.GetNativeArray(senderType);
                        var responders = chunk.GetNativeArray(responderType);
                        for (var i = 0; i < senders.Length; i++)
                        {
                            var requests = senders[i].RequestsToSend;
                            var responses = responders[i].ResponsesToSend;
                            if (requests.Count > 0)
                            {
                                foreach (var request in requests)
                                {
                                    commandSystem.SendCommand(request, entities[i]);
                                }

                                requests.Clear();
                            }

                            if (responses.Count > 0)
                            {
                                foreach (var response in responses)
                                {
                                    commandSystem.SendResponse(response);
                                }

                                responses.Clear();
                            }
                        }
                    }

                    chunks.Dispose();
                }
<# } #>

                <#= profilingEnd #>
<# } #>
            }
        }

        internal class ComponentCleanup : ComponentCleanupHandler
        {
            public override EntityArchetypeQuery CleanupArchetypeQuery => new EntityArchetypeQuery
            {
                All = Array.Empty<ComponentType>(),
                Any = new ComponentType[]
                {
                    ComponentType.Create<ComponentAdded<<#= componentNamespace #>.Component>>(),
                    ComponentType.Create<ComponentRemoved<<#= componentNamespace #>.Component>>(),
                    ComponentType.Create<<#= componentNamespace #>.ReceivedUpdates>(),
                    ComponentType.Create<AuthorityChanges<<#= componentNamespace #>.Component>>(),
<# foreach (var eventDetails in eventDetailsList) { #>
                    ComponentType.Create<ReceivedEvents.<#= eventDetails.EventName #>>(),
<# } #>
<# foreach (var commandDetails in commandDetailsList) { #>
                    ComponentType.Create<CommandRequests.<#= commandDetails.CommandName #>>(),
                    ComponentType.Create<CommandResponses.<#= commandDetails.CommandName #>>(),
<# } #>
                },
                None = Array.Empty<ComponentType>(),
            };

            public override void CleanComponents(ComponentGroup group, ComponentSystemBase system,
                EntityCommandBuffer buffer)
            {
                var entityType = system.GetArchetypeChunkEntityType();
                var componentAddedType = system.GetArchetypeChunkComponentType<ComponentAdded<<#= componentNamespace #>.Component>>();
                var componentRemovedType = system.GetArchetypeChunkComponentType<ComponentRemoved<<#= componentNamespace #>.Component>>();
                var receivedUpdateType = system.GetArchetypeChunkComponentType<<#= componentNamespace #>.ReceivedUpdates>();
                var authorityChangeType = system.GetArchetypeChunkComponentType<AuthorityChanges<<#= componentNamespace #>.Component>>();
<#
for (var i = 0; i < eventDetailsList.Count; i++) {
var eventDetails = eventDetailsList[i];
#>
                var <#= eventDetails.CamelCaseEventName #>EventType = system.GetArchetypeChunkComponentType<ReceivedEvents.<#= eventDetails.EventName #>>();
<# } #>
<#
for (var j = 0; j < commandDetailsList.Count; j++) {
    var commandDetails = commandDetailsList[j];
#>

                var <#= commandDetails.CamelCaseCommandName #>RequestType = system.GetArchetypeChunkComponentType<CommandRequests.<#= commandDetails.CommandName #>>();
                var <#= commandDetails.CamelCaseCommandName #>ResponseType = system.GetArchetypeChunkComponentType<CommandResponses.<#= commandDetails.CommandName #>>();
<# } #>

                var chunkArray = group.CreateArchetypeChunkArray(Allocator.TempJob);

                foreach (var chunk in chunkArray)
                {
                    var entities = chunk.GetNativeArray(entityType);

                    // Updates
                    if (chunk.Has(receivedUpdateType))
                    {
                        var updateArray = chunk.GetNativeArray(receivedUpdateType);
                        for (int i = 0; i < entities.Length; ++i)
                        {
                            buffer.RemoveComponent<<#= componentNamespace #>.ReceivedUpdates>(entities[i]);
                            var updateList = updateArray[i].Updates;

                            // Pool update lists to avoid excessive allocation
                            updateList.Clear();
                            <#= componentNamespace #>.Update.Pool.Push(updateList);

                            ReferenceTypeProviders.UpdatesProvider.Free(updateArray[i].handle);
                        }
                    }

                    // Component Added
                    if (chunk.Has(componentAddedType))
                    {
                        for (int i = 0; i < entities.Length; ++i)
                        {
                            buffer.RemoveComponent<ComponentAdded<<#= componentNamespace #>.Component>>(entities[i]);
                        }
                    }

                    // Component Removed
                    if (chunk.Has(componentRemovedType))
                    {
                        for (int i = 0; i < entities.Length; ++i)
                        {
                            buffer.RemoveComponent<ComponentRemoved<<#= componentNamespace #>.Component>>(entities[i]);
                        }
                    }

                    // Authority
                    if (chunk.Has(authorityChangeType))
                    {
                        var authorityChangeArray = chunk.GetNativeArray(authorityChangeType);
                        for (int i = 0; i < entities.Length; ++i)
                        {
                            buffer.RemoveComponent<AuthorityChanges<<#= componentNamespace #>.Component>>(entities[i]);
                            AuthorityChangesProvider.Free(authorityChangeArray[i].Handle);
                        }
                    }

<#
for (var i = 0; i < eventDetailsList.Count; i++) {
var eventDetails = eventDetailsList[i];
#>
                    // <#= eventDetails.EventName #> Event
                    if (chunk.Has(<#= eventDetails.CamelCaseEventName #>EventType))
                    {
                        var <#= eventDetails.CamelCaseEventName #>EventArray = chunk.GetNativeArray(<#= eventDetails.CamelCaseEventName #>EventType);
                        for (int i = 0; i < entities.Length; ++i)
                        {
                            buffer.RemoveComponent<ReceivedEvents.<#= eventDetails.EventName #>>(entities[i]);
                            ReferenceTypeProviders.<#= eventDetails.EventName #>Provider.Free(<#= eventDetails.CamelCaseEventName #>EventArray[i].handle);
                        }
                    }

<# } #>
<#
for (var j = 0; j < commandDetailsList.Count; j++) {
    var commandDetails = commandDetailsList[j];
#>
                    // <#= commandDetails.CommandName #> Command
                    if (chunk.Has(<#= commandDetails.CamelCaseCommandName #>RequestType))
                    {
                            var <#= commandDetails.CamelCaseCommandName #>RequestArray = chunk.GetNativeArray(<#= commandDetails.CamelCaseCommandName #>RequestType);
                        for (int i = 0; i < entities.Length; ++i)
                        {
                            buffer.RemoveComponent<CommandRequests.<#= commandDetails.CommandName #>>(entities[i]);
                            ReferenceTypeProviders.<#= commandDetails.CommandName #>RequestsProvider.Free(<#= commandDetails.CamelCaseCommandName #>RequestArray[i].CommandListHandle);
                        }
                    }

                    if (chunk.Has(<#= commandDetails.CamelCaseCommandName #>ResponseType))
                    {
                        var <#= commandDetails.CamelCaseCommandName #>ResponseArray = chunk.GetNativeArray(<#= commandDetails.CamelCaseCommandName #>ResponseType);
                        for (int i = 0; i < entities.Length; ++i)
                        {
                            buffer.RemoveComponent<CommandResponses.<#= commandDetails.CommandName #>>(entities[i]);
                            ReferenceTypeProviders.<#= commandDetails.CommandName #>ResponsesProvider.Free(<#= commandDetails.CamelCaseCommandName #>ResponseArray[i].CommandListHandle);
                        }
                    }
<# } #>
                }

                chunkArray.Dispose();
            }
        }

        internal class AcknowledgeAuthorityLossHandler : AbstractAcknowledgeAuthorityLossHandler
        {
            public override EntityArchetypeQuery Query => new EntityArchetypeQuery
            {
                All = new ComponentType[]
                {
                    ComponentType.ReadOnly<AuthorityLossImminent<<#= componentNamespace #>.Component>>(),
                    ComponentType.ReadOnly<SpatialEntityId>()
                },
                Any = Array.Empty<ComponentType>(),
                None = Array.Empty<ComponentType>()
            };

            public override void AcknowledgeAuthorityLoss(ComponentGroup group, ComponentSystemBase system,
                Improbable.Worker.CInterop.Connection connection)
            {
                var authorityLossType = system.GetArchetypeChunkComponentType<AuthorityLossImminent<<#= componentNamespace #>.Component>>();
                var spatialEntityType = system.GetArchetypeChunkComponentType<SpatialEntityId>();

                var chunkArray = group.CreateArchetypeChunkArray(Allocator.TempJob);

                foreach (var chunk in chunkArray)
                {
                    var authorityArray = chunk.GetNativeArray(authorityLossType);
                    var spatialEntityIdArray = chunk.GetNativeArray(spatialEntityType);

                    for (int i = 0; i < authorityArray.Length; ++i)
                    {
                        if (authorityArray[i].AcknowledgeAuthorityLoss)
                        {
                            connection.SendAuthorityLossImminentAcknowledgement(spatialEntityIdArray[i].EntityId.Id,
                                <#= componentDetails.ComponentId #>);
                        }
                    }
                }

                chunkArray.Dispose();
            }
        }
    }
}
